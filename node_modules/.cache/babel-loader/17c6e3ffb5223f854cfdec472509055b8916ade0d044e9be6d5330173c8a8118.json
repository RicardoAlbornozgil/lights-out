{"ast":null,"code":"var _jsxFileName = \"/home/maaa122321/projects/SpringBoard/exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({\n      length: nrows\n    }, () => Array.from({\n      length: ncols\n    }, () => Math.random() < chanceLightStartsOn));\n    return initialBoard;\n  }\n\n  /** check if the player has won */\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  /** flip the cells around a given cell */\n  function flipCellsAround(coord, boardCopy) {\n    const [y, x] = coord.split(\"-\").map(Number);\n    const flipCell = (y, x) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    };\n    flipCell(y, x);\n    flipCell(y, x - 1); // left\n    flipCell(y, x + 1); // right\n    flipCell(y - 1, x); // above\n    flipCell(y + 1, x); // below\n  }\n  function handleFlip(coord) {\n    setBoard(oldBoard => {\n      const boardCopy = oldBoard.map(row => [...row]);\n      flipCellsAround(coord, boardCopy);\n      return boardCopy;\n    });\n  }\n\n  /** render the board */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: hasWon() ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"YouWonMessage\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: cell,\n            flipCellsAroundMe: () => handleFlip(`${y}-${x}`)\n          }, `${y}-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }, this))\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","Array","from","length","Math","random","hasWon","every","row","cell","flipCellsAround","coord","boardCopy","y","x","split","map","Number","flipCell","handleFlip","oldBoard","children","className","fileName","_jsxFileName","lineNumber","columnNumber","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/home/maaa122321/projects/SpringBoard/exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({ length: nrows }, () => \n      Array.from({ length: ncols }, () => Math.random() < chanceLightStartsOn)\n    );\n    return initialBoard;\n  }\n\n  /** check if the player has won */\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  /** flip the cells around a given cell */\n  function flipCellsAround(coord, boardCopy) {\n    const [y, x] = coord.split(\"-\").map(Number);\n    const flipCell = (y, x) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    };\n\n    flipCell(y, x);\n    flipCell(y, x - 1); // left\n    flipCell(y, x + 1); // right\n    flipCell(y - 1, x); // above\n    flipCell(y + 1, x); // below\n  }\n\n  function handleFlip(coord) {\n    setBoard(oldBoard => {\n      const boardCopy = oldBoard.map(row => [...row]);\n      flipCellsAround(coord, boardCopy);\n      return boardCopy;\n    });\n  }\n\n  /** render the board */\n  return (\n    <div>\n      {hasWon() ? (\n        <div className=\"YouWonMessage\">You Won!</div>\n      ) : (\n        <table className=\"Board\">\n          <tbody>\n            {board.map((row, y) => (\n              <tr key={y}>\n                {row.map((cell, x) => (\n                  <Cell\n                    key={`${y}-${x}`}\n                    isLit={cell}\n                    flipCellsAroundMe={() => handleFlip(`${y}-${x}`)}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}